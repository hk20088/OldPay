// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SmInt.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.newspace.payplatform.unicomsms.ice;

public final class SmMsgPrxHelper extends Ice.ObjectPrxHelperBase implements SmMsgPrx
{
	private static final String __Login_name = "Login";

	public int Login(String strUserName, String strPasswd)
	{
		return Login(strUserName, strPasswd, null, false);
	}

	public int Login(String strUserName, String strPasswd, java.util.Map<String, String> __ctx)
	{
		return Login(strUserName, strPasswd, __ctx, true);
	}

	private int Login(String strUserName, String strPasswd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
	{
		if (__explicitCtx && __ctx == null)
		{
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "Login", __ctx);
		int __cnt = 0;
		try
		{
			while (true)
			{
				Ice._ObjectDel __delBase = null;
				try
				{
					__checkTwowayOnly("Login");
					__delBase = __getDelegate(false);
					_SmMsgDel __del = (_SmMsgDel) __delBase;
					return __del.Login(strUserName, strPasswd, __ctx, __observer);
				}
				catch (IceInternal.LocalExceptionWrapper __ex)
				{
					__handleExceptionWrapper(__delBase, __ex, __observer);
				}
				catch (Ice.LocalException __ex)
				{
					__cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
				}
			}
		}
		finally
		{
			if (__observer != null)
			{
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_Login(String strUserName, String strPasswd)
	{
		return begin_Login(strUserName, strPasswd, null, false, null);
	}

	public Ice.AsyncResult begin_Login(String strUserName, String strPasswd, java.util.Map<String, String> __ctx)
	{
		return begin_Login(strUserName, strPasswd, __ctx, true, null);
	}

	public Ice.AsyncResult begin_Login(String strUserName, String strPasswd, Ice.Callback __cb)
	{
		return begin_Login(strUserName, strPasswd, null, false, __cb);
	}

	public Ice.AsyncResult begin_Login(String strUserName, String strPasswd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
	{
		return begin_Login(strUserName, strPasswd, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_Login(String strUserName, String strPasswd, Callback_SmMsg_Login __cb)
	{
		return begin_Login(strUserName, strPasswd, null, false, __cb);
	}

	public Ice.AsyncResult begin_Login(String strUserName, String strPasswd, java.util.Map<String, String> __ctx, Callback_SmMsg_Login __cb)
	{
		return begin_Login(strUserName, strPasswd, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_Login(String strUserName, String strPasswd, java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb)
	{
		__checkAsyncTwowayOnly(__Login_name);
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __Login_name, __cb);
		try
		{
			__result.__prepare(__Login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
			__os.writeString(strUserName);
			__os.writeString(strPasswd);
			__result.__endWriteParams();
			__result.__send(true);
		}
		catch (Ice.LocalException __ex)
		{
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public int end_Login(Ice.AsyncResult __result)
	{
		Ice.AsyncResult.__check(__result, this, __Login_name);
		boolean __ok = __result.__wait();
		try
		{
			if (!__ok)
			{
				try
				{
					__result.__throwUserException();
				}
				catch (Ice.UserException __ex)
				{
					throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
				}
			}
			IceInternal.BasicStream __is = __result.__startReadParams();
			int __ret;
			__ret = __is.readInt();
			__result.__endReadParams();
			return __ret;
		}
		catch (Ice.LocalException ex)
		{
			Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
			if (__obsv != null)
			{
				__obsv.failed(ex.ice_name());
			}
			throw ex;
		}
	}

	private static final String __OnMo_name = "OnMo";

	public int OnMo(Mo sMo)
	{
		return OnMo(sMo, null, false);
	}

	public int OnMo(Mo sMo, java.util.Map<String, String> __ctx)
	{
		return OnMo(sMo, __ctx, true);
	}

	private int OnMo(Mo sMo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
	{
		if (__explicitCtx && __ctx == null)
		{
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "OnMo", __ctx);
		int __cnt = 0;
		try
		{
			while (true)
			{
				Ice._ObjectDel __delBase = null;
				try
				{
					__checkTwowayOnly("OnMo");
					__delBase = __getDelegate(false);
					_SmMsgDel __del = (_SmMsgDel) __delBase;
					return __del.OnMo(sMo, __ctx, __observer);
				}
				catch (IceInternal.LocalExceptionWrapper __ex)
				{
					__handleExceptionWrapper(__delBase, __ex, __observer);
				}
				catch (Ice.LocalException __ex)
				{
					__cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
				}
			}
		}
		finally
		{
			if (__observer != null)
			{
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_OnMo(Mo sMo)
	{
		return begin_OnMo(sMo, null, false, null);
	}

	public Ice.AsyncResult begin_OnMo(Mo sMo, java.util.Map<String, String> __ctx)
	{
		return begin_OnMo(sMo, __ctx, true, null);
	}

	public Ice.AsyncResult begin_OnMo(Mo sMo, Ice.Callback __cb)
	{
		return begin_OnMo(sMo, null, false, __cb);
	}

	public Ice.AsyncResult begin_OnMo(Mo sMo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
	{
		return begin_OnMo(sMo, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_OnMo(Mo sMo, Callback_SmMsg_OnMo __cb)
	{
		return begin_OnMo(sMo, null, false, __cb);
	}

	public Ice.AsyncResult begin_OnMo(Mo sMo, java.util.Map<String, String> __ctx, Callback_SmMsg_OnMo __cb)
	{
		return begin_OnMo(sMo, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_OnMo(Mo sMo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
	{
		__checkAsyncTwowayOnly(__OnMo_name);
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __OnMo_name, __cb);
		try
		{
			__result.__prepare(__OnMo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
			sMo.__write(__os);
			__result.__endWriteParams();
			__result.__send(true);
		}
		catch (Ice.LocalException __ex)
		{
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public int end_OnMo(Ice.AsyncResult __result)
	{
		Ice.AsyncResult.__check(__result, this, __OnMo_name);
		boolean __ok = __result.__wait();
		try
		{
			if (!__ok)
			{
				try
				{
					__result.__throwUserException();
				}
				catch (Ice.UserException __ex)
				{
					throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
				}
			}
			IceInternal.BasicStream __is = __result.__startReadParams();
			int __ret;
			__ret = __is.readInt();
			__result.__endReadParams();
			return __ret;
		}
		catch (Ice.LocalException ex)
		{
			Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
			if (__obsv != null)
			{
				__obsv.failed(ex.ice_name());
			}
			throw ex;
		}
	}

	private static final String __OnMt_name = "OnMt";

	public int OnMt(Mt sMt, Ice.StringHolder strGWID)
	{
		return OnMt(sMt, strGWID, null, false);
	}

	public int OnMt(Mt sMt, Ice.StringHolder strGWID, java.util.Map<String, String> __ctx)
	{
		return OnMt(sMt, strGWID, __ctx, true);
	}

	private int OnMt(Mt sMt, Ice.StringHolder strGWID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
	{
		if (__explicitCtx && __ctx == null)
		{
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "OnMt", __ctx);
		int __cnt = 0;
		try
		{
			while (true)
			{
				Ice._ObjectDel __delBase = null;
				try
				{
					__checkTwowayOnly("OnMt");
					__delBase = __getDelegate(false);
					_SmMsgDel __del = (_SmMsgDel) __delBase;
					return __del.OnMt(sMt, strGWID, __ctx, __observer);
				}
				catch (IceInternal.LocalExceptionWrapper __ex)
				{
					__handleExceptionWrapper(__delBase, __ex, __observer);
				}
				catch (Ice.LocalException __ex)
				{
					__cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
				}
			}
		}
		finally
		{
			if (__observer != null)
			{
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_OnMt(Mt sMt)
	{
		return begin_OnMt(sMt, null, false, null);
	}

	public Ice.AsyncResult begin_OnMt(Mt sMt, java.util.Map<String, String> __ctx)
	{
		return begin_OnMt(sMt, __ctx, true, null);
	}

	public Ice.AsyncResult begin_OnMt(Mt sMt, Ice.Callback __cb)
	{
		return begin_OnMt(sMt, null, false, __cb);
	}

	public Ice.AsyncResult begin_OnMt(Mt sMt, java.util.Map<String, String> __ctx, Ice.Callback __cb)
	{
		return begin_OnMt(sMt, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_OnMt(Mt sMt, Callback_SmMsg_OnMt __cb)
	{
		return begin_OnMt(sMt, null, false, __cb);
	}

	public Ice.AsyncResult begin_OnMt(Mt sMt, java.util.Map<String, String> __ctx, Callback_SmMsg_OnMt __cb)
	{
		return begin_OnMt(sMt, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_OnMt(Mt sMt, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
	{
		__checkAsyncTwowayOnly(__OnMt_name);
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __OnMt_name, __cb);
		try
		{
			__result.__prepare(__OnMt_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
			sMt.__write(__os);
			__result.__endWriteParams();
			__result.__send(true);
		}
		catch (Ice.LocalException __ex)
		{
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public int end_OnMt(Ice.StringHolder strGWID, Ice.AsyncResult __result)
	{
		Ice.AsyncResult.__check(__result, this, __OnMt_name);
		boolean __ok = __result.__wait();
		try
		{
			if (!__ok)
			{
				try
				{
					__result.__throwUserException();
				}
				catch (Ice.UserException __ex)
				{
					throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
				}
			}
			IceInternal.BasicStream __is = __result.__startReadParams();
			strGWID.value = __is.readString();
			int __ret;
			__ret = __is.readInt();
			__result.__endReadParams();
			return __ret;
		}
		catch (Ice.LocalException ex)
		{
			Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
			if (__obsv != null)
			{
				__obsv.failed(ex.ice_name());
			}
			throw ex;
		}
	}

	private static final String __OnMtResp_name = "OnMtResp";

	public int OnMtResp(MtResp sResp)
	{
		return OnMtResp(sResp, null, false);
	}

	public int OnMtResp(MtResp sResp, java.util.Map<String, String> __ctx)
	{
		return OnMtResp(sResp, __ctx, true);
	}

	private int OnMtResp(MtResp sResp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
	{
		if (__explicitCtx && __ctx == null)
		{
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "OnMtResp", __ctx);
		int __cnt = 0;
		try
		{
			while (true)
			{
				Ice._ObjectDel __delBase = null;
				try
				{
					__checkTwowayOnly("OnMtResp");
					__delBase = __getDelegate(false);
					_SmMsgDel __del = (_SmMsgDel) __delBase;
					return __del.OnMtResp(sResp, __ctx, __observer);
				}
				catch (IceInternal.LocalExceptionWrapper __ex)
				{
					__handleExceptionWrapper(__delBase, __ex, __observer);
				}
				catch (Ice.LocalException __ex)
				{
					__cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
				}
			}
		}
		finally
		{
			if (__observer != null)
			{
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_OnMtResp(MtResp sResp)
	{
		return begin_OnMtResp(sResp, null, false, null);
	}

	public Ice.AsyncResult begin_OnMtResp(MtResp sResp, java.util.Map<String, String> __ctx)
	{
		return begin_OnMtResp(sResp, __ctx, true, null);
	}

	public Ice.AsyncResult begin_OnMtResp(MtResp sResp, Ice.Callback __cb)
	{
		return begin_OnMtResp(sResp, null, false, __cb);
	}

	public Ice.AsyncResult begin_OnMtResp(MtResp sResp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
	{
		return begin_OnMtResp(sResp, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_OnMtResp(MtResp sResp, Callback_SmMsg_OnMtResp __cb)
	{
		return begin_OnMtResp(sResp, null, false, __cb);
	}

	public Ice.AsyncResult begin_OnMtResp(MtResp sResp, java.util.Map<String, String> __ctx, Callback_SmMsg_OnMtResp __cb)
	{
		return begin_OnMtResp(sResp, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_OnMtResp(MtResp sResp, java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb)
	{
		__checkAsyncTwowayOnly(__OnMtResp_name);
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __OnMtResp_name, __cb);
		try
		{
			__result.__prepare(__OnMtResp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
			sResp.__write(__os);
			__result.__endWriteParams();
			__result.__send(true);
		}
		catch (Ice.LocalException __ex)
		{
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public int end_OnMtResp(Ice.AsyncResult __result)
	{
		Ice.AsyncResult.__check(__result, this, __OnMtResp_name);
		boolean __ok = __result.__wait();
		try
		{
			if (!__ok)
			{
				try
				{
					__result.__throwUserException();
				}
				catch (Ice.UserException __ex)
				{
					throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
				}
			}
			IceInternal.BasicStream __is = __result.__startReadParams();
			int __ret;
			__ret = __is.readInt();
			__result.__endReadParams();
			return __ret;
		}
		catch (Ice.LocalException ex)
		{
			Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
			if (__obsv != null)
			{
				__obsv.failed(ex.ice_name());
			}
			throw ex;
		}
	}

	private static final String __OnReport_name = "OnReport";

	public int OnReport(MtReport sReport)
	{
		return OnReport(sReport, null, false);
	}

	public int OnReport(MtReport sReport, java.util.Map<String, String> __ctx)
	{
		return OnReport(sReport, __ctx, true);
	}

	private int OnReport(MtReport sReport, java.util.Map<String, String> __ctx, boolean __explicitCtx)
	{
		if (__explicitCtx && __ctx == null)
		{
			__ctx = _emptyContext;
		}
		final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "OnReport", __ctx);
		int __cnt = 0;
		try
		{
			while (true)
			{
				Ice._ObjectDel __delBase = null;
				try
				{
					__checkTwowayOnly("OnReport");
					__delBase = __getDelegate(false);
					_SmMsgDel __del = (_SmMsgDel) __delBase;
					return __del.OnReport(sReport, __ctx, __observer);
				}
				catch (IceInternal.LocalExceptionWrapper __ex)
				{
					__handleExceptionWrapper(__delBase, __ex, __observer);
				}
				catch (Ice.LocalException __ex)
				{
					__cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
				}
			}
		}
		finally
		{
			if (__observer != null)
			{
				__observer.detach();
			}
		}
	}

	public Ice.AsyncResult begin_OnReport(MtReport sReport)
	{
		return begin_OnReport(sReport, null, false, null);
	}

	public Ice.AsyncResult begin_OnReport(MtReport sReport, java.util.Map<String, String> __ctx)
	{
		return begin_OnReport(sReport, __ctx, true, null);
	}

	public Ice.AsyncResult begin_OnReport(MtReport sReport, Ice.Callback __cb)
	{
		return begin_OnReport(sReport, null, false, __cb);
	}

	public Ice.AsyncResult begin_OnReport(MtReport sReport, java.util.Map<String, String> __ctx, Ice.Callback __cb)
	{
		return begin_OnReport(sReport, __ctx, true, __cb);
	}

	public Ice.AsyncResult begin_OnReport(MtReport sReport, Callback_SmMsg_OnReport __cb)
	{
		return begin_OnReport(sReport, null, false, __cb);
	}

	public Ice.AsyncResult begin_OnReport(MtReport sReport, java.util.Map<String, String> __ctx, Callback_SmMsg_OnReport __cb)
	{
		return begin_OnReport(sReport, __ctx, true, __cb);
	}

	private Ice.AsyncResult begin_OnReport(MtReport sReport, java.util.Map<String, String> __ctx, boolean __explicitCtx,
			IceInternal.CallbackBase __cb)
	{
		__checkAsyncTwowayOnly(__OnReport_name);
		IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __OnReport_name, __cb);
		try
		{
			__result.__prepare(__OnReport_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
			IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
			sReport.__write(__os);
			__result.__endWriteParams();
			__result.__send(true);
		}
		catch (Ice.LocalException __ex)
		{
			__result.__exceptionAsync(__ex);
		}
		return __result;
	}

	public int end_OnReport(Ice.AsyncResult __result)
	{
		Ice.AsyncResult.__check(__result, this, __OnReport_name);
		boolean __ok = __result.__wait();
		try
		{
			if (!__ok)
			{
				try
				{
					__result.__throwUserException();
				}
				catch (Ice.UserException __ex)
				{
					throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
				}
			}
			IceInternal.BasicStream __is = __result.__startReadParams();
			int __ret;
			__ret = __is.readInt();
			__result.__endReadParams();
			return __ret;
		}
		catch (Ice.LocalException ex)
		{
			Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
			if (__obsv != null)
			{
				__obsv.failed(ex.ice_name());
			}
			throw ex;
		}
	}

	public static SmMsgPrx checkedCast(Ice.ObjectPrx __obj)
	{
		SmMsgPrx __d = null;
		if (__obj != null)
		{
			if (__obj instanceof SmMsgPrx)
			{
				__d = (SmMsgPrx) __obj;
			}
			else
			{
				if (__obj.ice_isA(ice_staticId()))
				{
					SmMsgPrxHelper __h = new SmMsgPrxHelper();
					__h.__copyFrom(__obj);
					__d = __h;
				}
			}
		}
		return __d;
	}

	public static SmMsgPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
	{
		SmMsgPrx __d = null;
		if (__obj != null)
		{
			if (__obj instanceof SmMsgPrx)
			{
				__d = (SmMsgPrx) __obj;
			}
			else
			{
				if (__obj.ice_isA(ice_staticId(), __ctx))
				{
					SmMsgPrxHelper __h = new SmMsgPrxHelper();
					__h.__copyFrom(__obj);
					__d = __h;
				}
			}
		}
		return __d;
	}

	public static SmMsgPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
	{
		SmMsgPrx __d = null;
		if (__obj != null)
		{
			Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
			try
			{
				if (__bb.ice_isA(ice_staticId()))
				{
					SmMsgPrxHelper __h = new SmMsgPrxHelper();
					__h.__copyFrom(__bb);
					__d = __h;
				}
			}
			catch (Ice.FacetNotExistException ex)
			{
			}
		}
		return __d;
	}

	public static SmMsgPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
	{
		SmMsgPrx __d = null;
		if (__obj != null)
		{
			Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
			try
			{
				if (__bb.ice_isA(ice_staticId(), __ctx))
				{
					SmMsgPrxHelper __h = new SmMsgPrxHelper();
					__h.__copyFrom(__bb);
					__d = __h;
				}
			}
			catch (Ice.FacetNotExistException ex)
			{
			}
		}
		return __d;
	}

	public static SmMsgPrx uncheckedCast(Ice.ObjectPrx __obj)
	{
		SmMsgPrx __d = null;
		if (__obj != null)
		{
			if (__obj instanceof SmMsgPrx)
			{
				__d = (SmMsgPrx) __obj;
			}
			else
			{
				SmMsgPrxHelper __h = new SmMsgPrxHelper();
				__h.__copyFrom(__obj);
				__d = __h;
			}
		}
		return __d;
	}

	public static SmMsgPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
	{
		SmMsgPrx __d = null;
		if (__obj != null)
		{
			Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
			SmMsgPrxHelper __h = new SmMsgPrxHelper();
			__h.__copyFrom(__bb);
			__d = __h;
		}
		return __d;
	}

	public static final String[] __ids = { "::Ice::Object", "::SmModule::SmMsg" };

	public static String ice_staticId()
	{
		return __ids[1];
	}

	protected Ice._ObjectDelM __createDelegateM()
	{
		return new _SmMsgDelM();
	}

	protected Ice._ObjectDelD __createDelegateD()
	{
		return new _SmMsgDelD();
	}

	public static void __write(IceInternal.BasicStream __os, SmMsgPrx v)
	{
		__os.writeProxy(v);
	}

	public static SmMsgPrx __read(IceInternal.BasicStream __is)
	{
		Ice.ObjectPrx proxy = __is.readProxy();
		if (proxy != null)
		{
			SmMsgPrxHelper result = new SmMsgPrxHelper();
			result.__copyFrom(proxy);
			return result;
		}
		return null;
	}

	public static final long serialVersionUID = 0L;
}
