// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SmInt.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.newspace.payplatform.unicomsms.ice;

public final class _SmMsgDelM extends Ice._ObjectDelM implements _SmMsgDel
{
	public int Login(String strUserName, String strPasswd, java.util.Map<String, String> __ctx,
			Ice.Instrumentation.InvocationObserver __observer) throws IceInternal.LocalExceptionWrapper
	{
		IceInternal.Outgoing __og = __handler.getOutgoing("Login", Ice.OperationMode.Normal, __ctx, __observer);
		try
		{
			try
			{
				IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
				__os.writeString(strUserName);
				__os.writeString(strPasswd);
				__og.endWriteParams();
			}
			catch (Ice.LocalException __ex)
			{
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			try
			{
				if (!__ok)
				{
					try
					{
						__og.throwUserException();
					}
					catch (Ice.UserException __ex)
					{
						throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
					}
				}
				IceInternal.BasicStream __is = __og.startReadParams();
				int __ret;
				__ret = __is.readInt();
				__og.endReadParams();
				return __ret;
			}
			catch (Ice.LocalException __ex)
			{
				throw new IceInternal.LocalExceptionWrapper(__ex, false);
			}
		}
		finally
		{
			__handler.reclaimOutgoing(__og);
		}
	}

	public int OnMo(Mo sMo, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper
	{
		IceInternal.Outgoing __og = __handler.getOutgoing("OnMo", Ice.OperationMode.Normal, __ctx, __observer);
		try
		{
			try
			{
				IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
				sMo.__write(__os);
				__og.endWriteParams();
			}
			catch (Ice.LocalException __ex)
			{
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			try
			{
				if (!__ok)
				{
					try
					{
						__og.throwUserException();
					}
					catch (Ice.UserException __ex)
					{
						throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
					}
				}
				IceInternal.BasicStream __is = __og.startReadParams();
				int __ret;
				__ret = __is.readInt();
				__og.endReadParams();
				return __ret;
			}
			catch (Ice.LocalException __ex)
			{
				throw new IceInternal.LocalExceptionWrapper(__ex, false);
			}
		}
		finally
		{
			__handler.reclaimOutgoing(__og);
		}
	}

	public int OnMt(Mt sMt, Ice.StringHolder strGWID, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper
	{
		IceInternal.Outgoing __og = __handler.getOutgoing("OnMt", Ice.OperationMode.Normal, __ctx, __observer);
		try
		{
			try
			{
				IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
				sMt.__write(__os);
				__og.endWriteParams();
			}
			catch (Ice.LocalException __ex)
			{
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			try
			{
				if (!__ok)
				{
					try
					{
						__og.throwUserException();
					}
					catch (Ice.UserException __ex)
					{
						throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
					}
				}
				IceInternal.BasicStream __is = __og.startReadParams();
				strGWID.value = __is.readString();
				int __ret;
				__ret = __is.readInt();
				__og.endReadParams();
				return __ret;
			}
			catch (Ice.LocalException __ex)
			{
				throw new IceInternal.LocalExceptionWrapper(__ex, false);
			}
		}
		finally
		{
			__handler.reclaimOutgoing(__og);
		}
	}

	public int OnMtResp(MtResp sResp, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper
	{
		IceInternal.Outgoing __og = __handler.getOutgoing("OnMtResp", Ice.OperationMode.Normal, __ctx, __observer);
		try
		{
			try
			{
				IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
				sResp.__write(__os);
				__og.endWriteParams();
			}
			catch (Ice.LocalException __ex)
			{
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			try
			{
				if (!__ok)
				{
					try
					{
						__og.throwUserException();
					}
					catch (Ice.UserException __ex)
					{
						throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
					}
				}
				IceInternal.BasicStream __is = __og.startReadParams();
				int __ret;
				__ret = __is.readInt();
				__og.endReadParams();
				return __ret;
			}
			catch (Ice.LocalException __ex)
			{
				throw new IceInternal.LocalExceptionWrapper(__ex, false);
			}
		}
		finally
		{
			__handler.reclaimOutgoing(__og);
		}
	}

	public int OnReport(MtReport sReport, java.util.Map<String, String> __ctx, Ice.Instrumentation.InvocationObserver __observer)
			throws IceInternal.LocalExceptionWrapper
	{
		IceInternal.Outgoing __og = __handler.getOutgoing("OnReport", Ice.OperationMode.Normal, __ctx, __observer);
		try
		{
			try
			{
				IceInternal.BasicStream __os = __og.startWriteParams(Ice.FormatType.DefaultFormat);
				sReport.__write(__os);
				__og.endWriteParams();
			}
			catch (Ice.LocalException __ex)
			{
				__og.abort(__ex);
			}
			boolean __ok = __og.invoke();
			try
			{
				if (!__ok)
				{
					try
					{
						__og.throwUserException();
					}
					catch (Ice.UserException __ex)
					{
						throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
					}
				}
				IceInternal.BasicStream __is = __og.startReadParams();
				int __ret;
				__ret = __is.readInt();
				__og.endReadParams();
				return __ret;
			}
			catch (Ice.LocalException __ex)
			{
				throw new IceInternal.LocalExceptionWrapper(__ex, false);
			}
		}
		finally
		{
			__handler.reclaimOutgoing(__og);
		}
	}
}
