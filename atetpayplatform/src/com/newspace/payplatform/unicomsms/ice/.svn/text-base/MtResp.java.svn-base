// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SmInt.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.newspace.payplatform.unicomsms.ice;

public class MtResp implements java.lang.Cloneable, java.io.Serializable
{
	public String strGWID;

	public int lErrorCode;

	public String strReserve;

	public MtResp()
	{
	}

	public MtResp(String strGWID, int lErrorCode, String strReserve)
	{
		this.strGWID = strGWID;
		this.lErrorCode = lErrorCode;
		this.strReserve = strReserve;
	}

	public boolean equals(java.lang.Object rhs)
	{
		if (this == rhs)
		{
			return true;
		}
		MtResp _r = null;
		if (rhs instanceof MtResp)
		{
			_r = (MtResp) rhs;
		}

		if (_r != null)
		{
			if (strGWID != _r.strGWID)
			{
				if (strGWID == null || _r.strGWID == null || !strGWID.equals(_r.strGWID))
				{
					return false;
				}
			}
			if (lErrorCode != _r.lErrorCode)
			{
				return false;
			}
			if (strReserve != _r.strReserve)
			{
				if (strReserve == null || _r.strReserve == null || !strReserve.equals(_r.strReserve))
				{
					return false;
				}
			}

			return true;
		}

		return false;
	}

	public int hashCode()
	{
		int __h = 5381;
		__h = IceInternal.HashUtil.hashAdd(__h, "::SmModule::MtResp");
		__h = IceInternal.HashUtil.hashAdd(__h, strGWID);
		__h = IceInternal.HashUtil.hashAdd(__h, lErrorCode);
		__h = IceInternal.HashUtil.hashAdd(__h, strReserve);
		return __h;
	}

	public java.lang.Object clone()
	{
		java.lang.Object o = null;
		try
		{
			o = super.clone();
		}
		catch (CloneNotSupportedException ex)
		{
			assert false; // impossible
		}
		return o;
	}

	public void __write(IceInternal.BasicStream __os)
	{
		__os.writeString(strGWID);
		__os.writeInt(lErrorCode);
		__os.writeString(strReserve);
	}

	public void __read(IceInternal.BasicStream __is)
	{
		strGWID = __is.readString();
		lErrorCode = __is.readInt();
		strReserve = __is.readString();
	}

	public static final long serialVersionUID = 2021948737L;
}
