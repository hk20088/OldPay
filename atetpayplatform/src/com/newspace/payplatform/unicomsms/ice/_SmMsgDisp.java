// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SmInt.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.newspace.payplatform.unicomsms.ice;

public abstract class _SmMsgDisp extends Ice.ObjectImpl implements SmMsg
{
	protected void ice_copyStateFrom(Ice.Object __obj) throws java.lang.CloneNotSupportedException
	{
		throw new java.lang.CloneNotSupportedException();
	}

	public static final String[] __ids = { "::Ice::Object", "::SmModule::SmMsg" };

	public boolean ice_isA(String s)
	{
		return java.util.Arrays.binarySearch(__ids, s) >= 0;
	}

	public boolean ice_isA(String s, Ice.Current __current)
	{
		return java.util.Arrays.binarySearch(__ids, s) >= 0;
	}

	public String[] ice_ids()
	{
		return __ids;
	}

	public String[] ice_ids(Ice.Current __current)
	{
		return __ids;
	}

	public String ice_id()
	{
		return __ids[1];
	}

	public String ice_id(Ice.Current __current)
	{
		return __ids[1];
	}

	public static String ice_staticId()
	{
		return __ids[1];
	}

	public final int Login(String strUserName, String strPasswd)
	{
		return Login(strUserName, strPasswd, null);
	}

	public final int OnMo(Mo sMo)
	{
		return OnMo(sMo, null);
	}

	public final int OnMt(Mt sMt, Ice.StringHolder strGWID)
	{
		return OnMt(sMt, strGWID, null);
	}

	public final int OnMtResp(MtResp sResp)
	{
		return OnMtResp(sResp, null);
	}

	public final int OnReport(MtReport sReport)
	{
		return OnReport(sReport, null);
	}

	public static Ice.DispatchStatus ___Login(SmMsg __obj, IceInternal.Incoming __inS, Ice.Current __current)
	{
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		String strUserName;
		String strPasswd;
		strUserName = __is.readString();
		strPasswd = __is.readString();
		__inS.endReadParams();
		int __ret = __obj.Login(strUserName, strPasswd, __current);
		IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
		__os.writeInt(__ret);
		__inS.__endWriteParams(true);
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___OnMt(SmMsg __obj, IceInternal.Incoming __inS, Ice.Current __current)
	{
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		Mt sMt;
		sMt = new Mt();
		sMt.__read(__is);
		__inS.endReadParams();
		Ice.StringHolder strGWID = new Ice.StringHolder();
		int __ret = __obj.OnMt(sMt, strGWID, __current);
		IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
		__os.writeString(strGWID.value);
		__os.writeInt(__ret);
		__inS.__endWriteParams(true);
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___OnMtResp(SmMsg __obj, IceInternal.Incoming __inS, Ice.Current __current)
	{
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		MtResp sResp;
		sResp = new MtResp();
		sResp.__read(__is);
		__inS.endReadParams();
		int __ret = __obj.OnMtResp(sResp, __current);
		IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
		__os.writeInt(__ret);
		__inS.__endWriteParams(true);
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___OnReport(SmMsg __obj, IceInternal.Incoming __inS, Ice.Current __current)
	{
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		MtReport sReport;
		sReport = new MtReport();
		sReport.__read(__is);
		__inS.endReadParams();
		int __ret = __obj.OnReport(sReport, __current);
		IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
		__os.writeInt(__ret);
		__inS.__endWriteParams(true);
		return Ice.DispatchStatus.DispatchOK;
	}

	public static Ice.DispatchStatus ___OnMo(SmMsg __obj, IceInternal.Incoming __inS, Ice.Current __current)
	{
		__checkMode(Ice.OperationMode.Normal, __current.mode);
		IceInternal.BasicStream __is = __inS.startReadParams();
		Mo sMo;
		sMo = new Mo();
		sMo.__read(__is);
		__inS.endReadParams();
		int __ret = __obj.OnMo(sMo, __current);
		IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
		__os.writeInt(__ret);
		__inS.__endWriteParams(true);
		return Ice.DispatchStatus.DispatchOK;
	}

	private final static String[] __all = { "Login", "OnMo", "OnMt", "OnMtResp", "OnReport", "ice_id", "ice_ids", "ice_isA", "ice_ping" };

	public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
	{
		int pos = java.util.Arrays.binarySearch(__all, __current.operation);
		if (pos < 0)
		{
			throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
		}

		switch (pos)
		{
			case 0:
			{
				return ___Login(this, in, __current);
			}
			case 1:
			{
				return ___OnMo(this, in, __current);
			}
			case 2:
			{
				return ___OnMt(this, in, __current);
			}
			case 3:
			{
				return ___OnMtResp(this, in, __current);
			}
			case 4:
			{
				return ___OnReport(this, in, __current);
			}
			case 5:
			{
				return ___ice_id(this, in, __current);
			}
			case 6:
			{
				return ___ice_ids(this, in, __current);
			}
			case 7:
			{
				return ___ice_isA(this, in, __current);
			}
			case 8:
			{
				return ___ice_ping(this, in, __current);
			}
		}

		assert (false);
		throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
	}

	protected void __writeImpl(IceInternal.BasicStream __os)
	{
		__os.startWriteSlice(ice_staticId(), -1, true);
		__os.endWriteSlice();
	}

	protected void __readImpl(IceInternal.BasicStream __is)
	{
		__is.startReadSlice();
		__is.endReadSlice();
	}

	public static final long serialVersionUID = 0L;
}
